getwd
getwd()
install.packages("Rcmdr", dependencies = TRUE)
q()
q()
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
}
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
}
x <- rnorm(10)
print(x)
x <- rnorm(10,20,2)
print(x)
summary(x)
e <- rnoem(100,0,1)
e <- rnorm(100,0,1)
y <- 1.5 -3*x + e
plot(x,y)
x <- rnorm(100)
y <- 1.5 -3*x + e
plot(x,y)
q()
q()
add2 <- function(x, y) {
x + y
}
add2(2,4)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(3)
above(11)
above(11,11)
above(x,11)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x,12)
above(x)
add2(3,3)
above(0)
above(1)
above(20)
above(20, 10)
above10 <- function(x) {
use <- x > 10
x[use]
}
above10()
above10(1)
above10(2)
above <- function(x, n) {
use <- x > n
x[use]
}
above()
above(2)
above(2, 10)
above <- function(x, n) {
y <- x > n
x[y]
}
above(2,12)
above(x,12)
x == 0
x = 0
above(x,12)
class(x)
x > 10
y <- n > 10
y <- x > 10
x[y]
length(x)
x <- 1:20
above(x)
above(x, 10)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
airquality <- read.csv("~/2 - Projetos/Cursos/Coursera/DS_R_Programming/hw1_data.csv")
View(airquality)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
make.power <- function(n) {
pow <- function(x){
x^n
}
pow
}
cube <- make.power(3)
cube(3)
square <-make.power(2)
square(3)
cube <- function(x,n) {
x^3
}
cube(3)
3L
x <- 3L
class(x)
?if
help(if)
help("if")
x <- 1:10
x
x <- 0
x
x <- 1:10
if(x>5){}
if(x>5){x <- 0}
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
Sys.setenv(TZ = 'America/Sao_Paulo')
str(OlsonNames())
stt <- str(OlsonNames())
stt
OlsonNames
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv("patch2csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
tbl_mydf
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, country == "IN", r_version == "3.0.2")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu"))
filter(cran, !is.na(r_version))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version, ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran2, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
lybrary(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count ? 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
?mutate
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(list(passed, failed))
list(passed, failed) %>% bind_rows
bind_rows(passed, failed)
sat
?select
?separate
submit()
submit()
sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
Year(this_day)
year(this_day)
wday(this_day
)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
TZ = "UTC"
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 13, minutes = 55, seconds = 00)
this_moment
?now
now(tzone = "America/Sao_Paulo")
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), tzone = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
last_time <- mdy("June 17, 2008")
last_time
?new_interval
how_long(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
last_time <- mdy("June 12, 1985", tz = "Singapore")
last_time
arrive
how_long <- new_interval(last_time, arrive)
as.period(how_long)
how_long <- new_interval(arrive, last_time)
as.period(how_long)
mdy("June 12, 1985")
mdy("June-12-1985")
exit
save.image("~/.RData")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
find_rtools()
find_rtools()
install_github("genomicsclass/dagdata")
Sys.timezones
Sys.timezones()
Sys.timezone()
sys.setevnv(TZ = 'GMT')
Sys.setevnv(TZ = 'GMT')
Sys.setenv(TZ = 'GMT')
Sys.timezone()
Sys.setenv(TZ = 'GMT-3')
Sys.timezone()
install_github("ririzarr/rafalib")
setwd("~/2 - Projetos/Cursos/Coursera/DS_Reproducible/GitHub/RepData_PeerAssessment2")
?POSIXct
dados <- read.csv(bzfile("repdata-data-StormData.csv.bz2"),
header = TRUE, na.strings = "NA",
colClasses = c("NULL", "character", rep("NULL", 4), "factor",
"factor", rep("NULL", 3), "character",
rep("NULL", 10), "numeric","numeric", "numeric",
"character", "numeric", "character",
rep("NULL", 8), "numeric"))
str(dados
)
dados <- read.csv(bzfile("repdata-data-StormData.csv.bz2"),
header = TRUE, na.strings = "NA",
colClasses = c("NULL", "character", rep("NULL", 4), "factor",
"factor", rep("NULL", 4), rep("NULL", 10),
"numeric","numeric", "numeric", "character",
"numeric", "character",rep("NULL", 8),
"numeric"))
str(dados)
dados <- transform(dados, tempo = as.Date(dados$BGN_DATE, "%m/%d/%Y"))
head(dados)
Sys.setlocale("LC_TIME", "English")
Sys.setenv(tz = "UTC")
dados <- transform(dados, tempo = as.Date(dados$BGN_DATE, "%m/%d/%Y"))
head(dados)
dados <- transform(dados, BGN_DATE = as.Date(dados$BGN_DATE, "%m/%d/%Y"))
head(dados)
a <- 1e3
a
dados <- transform(dados, tempo = as.Date(dados$BGN_DATE, "%m/%d/%Y"),
prejuizo = (dados$PROPDMG * 1e6 * (dados$PROPDMGEXP == "B") +
dados$PROPDMG * 1e3 * (dados$PROPDMGEXP == "M") +
dados$PROPDMG * (dados$PROPDMGEXP == "K") +
dados$PROPDMG / 1e3 * (dados$PROPDMGEXP == "")),
campo = (dados$CROPDMG * 1e6 * (dados$CROPDMGEXP == "B") +
dados$CROPDMG * 1e3 * (dados$CROPDMGEXP == "M") +
dados$CROPDMG * (dados$CROPDMGEXP == "K") +
dados$CROPDMG / 1e3 * (dados$CROPDMGEXP == "")))
head(dados)
tail(dados)
sum(is.na(dados$PROPDMG))
sum(is.na(dados$CROPDMG))
sum(is.na(dados$CROPDMGEXP))
sum(is.na(dados$PROPDMGEXP))
dados[1000,]
dados[10000,]
dados[70000,]
dados[170000,]
dados[270000,]
dados[370000,]
dados[470000,]
max(dados$PROPDMG)
dados[grep(5000, dados$PROPDMG),]
dados[grep(M, dados$PROPDMGEXP),]
dados[grep("M", dados$PROPDMGEXP),]
dados[31029,]
str(dad0s)
str(dados)
dados <- dados[, c(3:6,11:13)]
str(dados)
dados[, grep("Astr", dados$EVTYPE)]
Sys.setlocale("LC_TIME", "English")
Sys.setenv(tz = "UTC")
options(scipen = 999)
dados <- read.csv(bzfile("repdata-data-StormData.csv.bz2"),
header = TRUE, na.strings = "NA",
colClasses = c("NULL", "character", rep("NULL", 4), "factor",
"factor", rep("NULL", 4), rep("NULL", 10),
"numeric","numeric", "numeric", "character",
"numeric", "character",rep("NULL", 8),
"numeric"))
dados[, grep("Astr", dados$EVTYPE)]
dados[, grep("Astr*", dados$EVTYPE)]
dados[, grep("Astr?", dados$EVTYPE)]
dados[, grep("Hurr?", dados$EVTYPE)]
str(dados)
dados[, grep("Hurr?", levels(dados$EVTYPE))]
dados[, grep("Hurr*", dados$EVTYPE)]
dados[grep("Hurr*", dados$EVTYPE),]
dados[grep("Ice*", dados$EVTYPE),]
dados[grep("Ic*", dados$EVTYPE),]
dados[grep("Den*", dados$EVTYPE),]
dados[grep("Drou*", dados$EVTYPE),]
dados[grep("Ava*", dados$EVTYPE),]
dados[grep("Dust*", dados$EVTYPE),]
dados[grep("Dust", dados$EVTYPE),]
dados[grep("Dense", dados$EVTYPE),]
dados[grep("Flood", dados$EVTYPE),]
levels(dados$EVTYPE)
?as.factor
?factor
dados <- read.csv(bzfile("repdata-data-StormData.csv.bz2"),
header = TRUE, na.strings = "NA",
colClasses = c("NULL", "character", rep("NULL", 4), "factor",
"character", rep("NULL", 4), rep("NULL", 10),
"numeric","numeric", "numeric", "character",
"numeric", "character",rep("NULL", 8),
"numeric"))
str(dados)
